#!/usr/bin/env bash

print_help() {
	echo "usage: spoon [flags] <identifier>"
}

has_short_flag() {
	flag="$1"
	shift
	args="$*"
	for arg in $args; do
		if [ "${arg:0:1}" = - ] && [ "${arg:1:1}" != - ] && [[ "$arg" =~ $flag ]]; then
			return 0
		fi
	done
	return 1
}

has_long_flag() {
	flag="$1"
	shift
	args="$*"
	for arg in $args; do
		if [ "${arg:0:2}" = -- ] && [[ "$arg" == "--$flag" ]]; then
			return 0
		fi
	done
	return 1
}

check_args() {
	if [[ "${arg_prod}" = 1 ]] && [[ "${arg_prod}" = 1 ]]; then
		echo "Invalid arguments: -P/--prod and -p/--preprod are mutually exclusive."
		exit 1
	fi
	if [[ "${arg_first}" = 1 ]] && [[ "${arg_all}" = 1 ]]; then
		echo "Invalid arguments: -1/--first and -a/--all are mutually exclusive."
		exit 1
	fi
}

################################################
################################################
################################################

query_aws() {
	# the backticks are part of the JMESPath expression and should be passed literally, not interpolated - disable relevant shellcheck rule
	# shellcheck disable=SC2016
	if nodes="$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].{id: InstanceId, ip: PublicIpAddress, state: State.Name, service: (Tags[?Key == `"Name"`].Value)[0]}[0]' "${@}")"; then
		echo "${nodes}"
	else
		return 1
	fi
}

query_aws_by_name() {
	query_aws --filters "Name=tag:Name,Values=*$1*"
}

query_aws_by_id() {
	query_aws --instance-ids "$1"
}

################################################
################################################
################################################

spoon_ssh() {
	nodes="$1"
	if [[ "${node_count}" -gt 1 ]]; then
		ips=$(echo "${nodes}" | jq '.[].ip' | tr -d '"' | xargs)
		ssh_multiple "${ips}"
	else
		ip=$(echo "${nodes}" | jq '.[0].ip' | tr -d '"')
		ssh_single -o StrictHostKeyChecking=no -l root  "${ip}"
	fi
}

ssh_single() {
	[[ "${arg_dry_run}" = 1 ]] && exit 0
	ssh "${@}"
}

ssh_multiple() {
	check_cssh_availability
	[[ "${arg_dry_run}" = 1 ]] && exit 0
	if [[ "$TERM_PROGRAM" == "iTerm.app" ]]; then
		# I actually need the word splitting here, hence the lack of quotes
		# shellcheck disable=SC2086
	    i2cssh --login root $1
	    echo hint: press Cmd+Shift+I to send your keyboard input to all the instances
	else
		# I actually need the word splitting here, hence the lack of quotes
		# shellcheck disable=SC2086
	    csshx --login root $1
	fi
}

check_cssh_availability() {
	if [[ "${TERM_PROGRAM}" == iTerm.app ]]; then
		if ! command -v i2cssh >/dev/null; then
			echo Please install i2cssh to SSH to multiple instances.
			exit 1
		fi
	else
		if ! command -v csshx >/dev/null; then
			echo Please install csshX to SSH to multiple instances.
			exit 1
		fi
	fi
}

################################################
################################################
################################################

if [[ $# -lt 1 ]]; then
	print_help
	exit 1
fi

if has_short_flag h "$@" || has_long_flag help "$@"; then
	print_help
	exit 0
fi

identifier="${*: -1}"

if [[ "${identifier}" =~ ^- ]]; then
	echo identifier must not be empty
	exit 1
fi

if has_short_flag i "$@" || has_long_flag instance-id "$@"; then arg_instance_id=1; else arg_instance_id=0; fi
if has_short_flag p "$@" || has_long_flag preprod "$@"; then arg_preprod=1; else arg_preprod=0; fi
if has_short_flag P "$@" || has_long_flag prod "$@"; then arg_prod=1; else arg_prod=0; fi
if has_short_flag 1 "$@" || has_long_flag first "$@"; then arg_first=1; else arg_first=0; fi
if has_short_flag a "$@" || has_long_flag all "$@"; then arg_all=1; else arg_all=0; fi
if has_short_flag v "$@" || has_long_flag verbose "$@"; then arg_verbose=1; else arg_verbose=0; fi
if has_short_flag n "$@" || has_long_flag dry-run "$@"; then arg_dry_run=1; else arg_dry_run=0; fi

check_args

if [[ "${arg_verbose}" = 1 ]]; then
	echo "[spoon] identifier=${identifier}"
	echo "[spoon] arg_instance_id=${arg_instance_id}"
	echo "[spoon] arg_preprod=${arg_preprod}"
	echo "[spoon] arg_prod=${arg_prod}"
	echo "[spoon] arg_first=${arg_first}"
	echo "[spoon] arg_dry_run=${arg_dry_run}"
fi

if [[ $arg_instance_id = 1 ]]; then
	nodes=$(query_aws_by_id "$identifier")
else
	nodes=$(query_aws_by_name "$identifier")
fi
# I don't want to cram the entire if statement into the condition of another one
# shellcheck disable=SC2181
if [[ "$?" -ne 0 ]]; then
	echo "Encountered an error while using awscli. Please make sure it's installed and you are authorized to make requests."
	exit 1
fi

[[ "${arg_verbose}" = 1 ]] && echo -e "[spoon] nodes returned from aws:\\n${nodes}"

node_count=$(echo "${nodes}" | jq '. | length')
if [[ "${node_count}" -eq 0 ]]; then
	echo "No instances found for identifier '${identifier}'."
	exit 1
fi

if [[ $arg_preprod = 1 ]]; then
	nodes=$(echo "${nodes}" | jq 'map(select(.service | test("preprod|-pp")))')
elif [[ $arg_prod = 1 ]]; then
	nodes=$(echo "${nodes}" | jq 'map(select(.service | test("preprod|-pp") | not))')
fi

if [ "${arg_verbose}" = 1 ] && [ $arg_prod = 1 ]; then
	echo "[spoon] nodes after filtering for prod/preprod: ${nodes}"
fi

if [[ $arg_first = 1 ]]; then
	nodes=$(echo "${nodes}" | jq '[.[0]]')
fi

spoon_ssh "${nodes}"
