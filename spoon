#!/bin/sh

if [[ $# -ne 1 ]]; then
	echo "Usage: $0 [INSTANCE-ID|NAME]"
	exit 1
fi


ORIGINAL_IFS=$IFS

### try instance id first, add i- prefix if missing

NODES=$(aws ec2 describe-instances --instance-ids $(echo "i-$1" | sed s/^i-i-/i-/) 2>/dev/null)
NODE_NUM=$(echo $NODES | jq '.Reservations | length')
if [[ $NODE_NUM -eq 1 ]]; then
	IP=$(echo $NODES | jq .Reservations[0].Instances[0].PublicIpAddress | sed 's/"//g')
	ssh -l root $IP
	exit 0
fi


### search for name if instance-id yields no results

NODES=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=*$1*")
NODE_NUM=$(echo $NODES | jq '.Reservations | length')
if [[ $NODE_NUM -eq 1 ]]; then
	IP=$(echo $NODES | jq .Reservations[0].Instances[0].PublicIpAddress | sed 's/"//g')
	ssh -l root $IP
	exit 0
fi

if [[ $NODE_NUM -eq 0 ]]; then
	echo "No instances found for $1"
	exit 1
fi

# the grepping at the end could probably be done in jq as well but I already don't understand my own jq expression
NODE_NAMES=$(echo $NODES | jq '.Reservations | map(.Instances[0] | (.Tags | map(select(.Key == "Name").Value))[0] + "__" + .PublicIpAddress + "__(" + .State.Name + ")")' | grep -v "\[\|\]" | sed "s/\"//g" | sed "s/,//g"| xargs)
IFS="^"
NODE_NAMES=$(echo $NODE_NAMES | sed 's/ /\^/g' | sed 's/__/    /g')

echo "*) all of the following (csshx)"
select name in $NODE_NAMES; do : ; break; done
IFS=$ORIGINAL_IFS

if [[ $REPLY == '*' ]]; then
	IPS=$(echo $NODES | jq '.Reservations | map(.Instances[0].PublicIpAddress)' | grep -v "\[\|\]" | sed "s/[\",]//g" | xargs)
	csshx --login root $IPS
else
	(( NODE_INDEX = $REPLY - 1 ))
	IP=$(echo $NODES | jq .Reservations[$NODE_INDEX].Instances[0].PublicIpAddress | sed s/\"//g)
	ssh -l root $IP
fi
